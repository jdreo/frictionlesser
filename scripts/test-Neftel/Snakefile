import datetime

configfile: "config.yaml"

SEEDS=list(range(0,config["runs"]))

# From workdir: one more dir up.
# FRICTIONLESSER="../../../release/app/frictionlesser"
FRICTIONLESSER="singularity run ../../../frictionlesser.sif"

NOW=datetime.date.today().isoformat()
workdir: "expe_{name}_{date}".format(name=config["expe-name"], date=NOW)

rule all:
    input:
        expand("signatures_of_{size}-genes/signature_{seed}.txt", size=config["sizes"], seed=SEEDS)

rule download_neftel:
    output:
        "GSE131928_RAW.tar"
    shell:
        "wget ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE131nnn/GSE131928/suppl/GSE131928_RAW.tar"

rule extract_neftel:
    input:
        "GSE131928_RAW.tar"
    output:
        "GSM3828672_Smartseq2_GBM_IDHwt_processed_TPM.tsv.gz",
        "GSM3828673_10X_GBM_IDHwt_processed_TPM.tsv.gz"
    shell:
        "tar xf {input}"

rule uncompress:
    input:
        "{file}.tsv.gz"
    output:
        "{file}.tsv"
    shell:
        "gunzip {input}"

# Make the data smaller, so as to speed-up testings.
rule shorten_neftel:
    input:
        "GSM3828672_Smartseq2_GBM_IDHwt_processed_TPM.tsv"
    output:
        "exprs.csv"
    shell:
        # set +o pipefail: disable failing on pipe error, to bypass a qsv bug.
        # qsv transpose: transpose AND CONVERT TO CSV
        # head: shorten columns
        # qsv transpose: untranspose
        # head: shorten lines
        "set +o pipefail ; qsv transpose {input} | head -n 20 | qsv transpose | head -n 20 > {output}"

rule rank:
    input:
        "exprs.csv"
    output:
        "ranks.tsv"
    shell:
        "{FRICTIONLESSER}"
        "  --exprs={input}"
        "  > {output}"

rule save_cache_transcriptome:
    input:
        "ranks.tsv"
    output:
        protected("cache/trans.cache.dat")
    shell:
        "{FRICTIONLESSER}"
        "  --ranks={input}"
        "  --cache-transcriptome={output}"
        "  --cache-only"

rule save_cache_size:
    input:
        ranks="ranks.tsv",
        transcache="cache/trans.cache.dat"
    output:
        protected("cache/size_{size}.cache.dat")
    wildcard_constraints:
        # Wildcard {size} should be numeric.
        size="\d+"
    shell:
        "{FRICTIONLESSER}"
        "  --ranks={input.ranks}"
        "  --cache-transcriptome={input.transcache}"
        "  --cache-size={output}"
        "  --cache-only"

rule load_and_run:
    input:
        ranks="ranks.tsv",
        transcache="cache/trans.cache.dat",
        sizecache="cache/size_{size}.cache.dat"
    output:
        "signatures_of_{size}-genes/signature_{seed}.txt"
    wildcard_constraints:
        # Wildcards should be numeric.
        seed="\d+",
        size="\d+"
    shell:
        "{FRICTIONLESSER}"
        "  --ranks={input.ranks}"
        "  --cache-transcriptome={input.transcache}"
        "  --cache-size={input.sizecache}"
        "  --ngenes={wildcards.size}"
        "  --seed={wildcards.seed}"
        "  > {output}"
